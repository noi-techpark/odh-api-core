// SPDX-FileCopyrightText: NOI Techpark <digital@noi.bz.it>
//
// SPDX-License-Identifier: CC0-1.0

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ServiceReferenceCDBData
{
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="https://lcs.lts.it/data", ConfigurationName="ServiceReferenceCDBData.CDBDataSoap")]
    public interface CDBDataSoap
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="https://lcs.lts.it/data/SendDataTestFunction", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string SendDataTestFunction(string sInput);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://lcs.lts.it/data/SendDataTestFunction", ReplyAction="*")]
        System.Threading.Tasks.Task<string> SendDataTestFunctionAsync(string sInput);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://lcs.lts.it/data/SendData", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string SendData(string sInput);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://lcs.lts.it/data/SendData", ReplyAction="*")]
        System.Threading.Tasks.Task<string> SendDataAsync(string sInput);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://lcs.lts.it/data/SendDataXmlOut", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Xml.XmlNode SendDataXmlOut(string sInput);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://lcs.lts.it/data/SendDataXmlOut", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Xml.XmlNode> SendDataXmlOutAsync(string sInput);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://lcs.lts.it/data/SendDataXml", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Xml.XmlNode SendDataXml(System.Xml.XmlNode oXDocInput);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://lcs.lts.it/data/SendDataXml", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Xml.XmlNode> SendDataXmlAsync(System.Xml.XmlNode oXDocInput);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://lcs.lts.it/data/SendIP", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string SendIP(string sInput);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://lcs.lts.it/data/SendIP", ReplyAction="*")]
        System.Threading.Tasks.Task<string> SendIPAsync(string sInput);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://lcs.lts.it/data/SendIPXmlOut", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Xml.XmlNode SendIPXmlOut(string sInput);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://lcs.lts.it/data/SendIPXmlOut", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Xml.XmlNode> SendIPXmlOutAsync(string sInput);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://lcs.lts.it/data/SendIPXml", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Xml.XmlNode SendIPXml(System.Xml.XmlNode oXDocInput);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://lcs.lts.it/data/SendIPXml", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Xml.XmlNode> SendIPXmlAsync(System.Xml.XmlNode oXDocInput);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://lcs.lts.it/data/GetTicket", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string GetTicket(string sInput);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://lcs.lts.it/data/GetTicket", ReplyAction="*")]
        System.Threading.Tasks.Task<string> GetTicketAsync(string sInput);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://lcs.lts.it/data/CheckTicket", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string CheckTicket(string sInput);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://lcs.lts.it/data/CheckTicket", ReplyAction="*")]
        System.Threading.Tasks.Task<string> CheckTicketAsync(string sInput);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://lcs.lts.it/data/CheckTicketTICWeb_A", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string CheckTicketTICWeb_A(string sInput);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://lcs.lts.it/data/CheckTicketTICWeb_A", ReplyAction="*")]
        System.Threading.Tasks.Task<string> CheckTicketTICWeb_AAsync(string sInput);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://lcs.lts.it/data/BackOffXml", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Xml.XmlNode BackOffXml(System.Xml.XmlNode oXDocInput);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://lcs.lts.it/data/BackOffXml", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Xml.XmlNode> BackOffXmlAsync(System.Xml.XmlNode oXDocInput);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://lcs.lts.it/data/BackOffXmlOut", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Xml.XmlNode BackOffXmlOut(string sInput);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://lcs.lts.it/data/BackOffXmlOut", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Xml.XmlNode> BackOffXmlOutAsync(string sInput);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://lcs.lts.it/data/BackOff", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string BackOff(string sInput);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://lcs.lts.it/data/BackOff", ReplyAction="*")]
        System.Threading.Tasks.Task<string> BackOffAsync(string sInput);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://lcs.lts.it/data/GetMyIPAddress", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string GetMyIPAddress();
        
        [System.ServiceModel.OperationContractAttribute(Action="https://lcs.lts.it/data/GetMyIPAddress", ReplyAction="*")]
        System.Threading.Tasks.Task<string> GetMyIPAddressAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="https://lcs.lts.it/data/GetWebServerDateTime", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string GetWebServerDateTime();
        
        [System.ServiceModel.OperationContractAttribute(Action="https://lcs.lts.it/data/GetWebServerDateTime", ReplyAction="*")]
        System.Threading.Tasks.Task<string> GetWebServerDateTimeAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="https://lcs.lts.it/data/GetCdbDateTime", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string GetCdbDateTime();
        
        [System.ServiceModel.OperationContractAttribute(Action="https://lcs.lts.it/data/GetCdbDateTime", ReplyAction="*")]
        System.Threading.Tasks.Task<string> GetCdbDateTimeAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="https://lcs.lts.it/data/GetTicDB1DateTime", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string GetTicDB1DateTime();
        
        [System.ServiceModel.OperationContractAttribute(Action="https://lcs.lts.it/data/GetTicDB1DateTime", ReplyAction="*")]
        System.Threading.Tasks.Task<string> GetTicDB1DateTimeAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="https://lcs.lts.it/data/SendMYSXml", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Xml.XmlNode SendMYSXml(System.Xml.XmlNode oXDocInput);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://lcs.lts.it/data/SendMYSXml", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Xml.XmlNode> SendMYSXmlAsync(System.Xml.XmlNode oXDocInput);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://lcs.lts.it/data/SendMYS", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string SendMYS(string sInput);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://lcs.lts.it/data/SendMYS", ReplyAction="*")]
        System.Threading.Tasks.Task<string> SendMYSAsync(string sInput);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://lcs.lts.it/data/SendMYSXmlOut", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Xml.XmlNode SendMYSXmlOut(string sInput);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://lcs.lts.it/data/SendMYSXmlOut", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Xml.XmlNode> SendMYSXmlOutAsync(string sInput);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    public interface CDBDataSoapChannel : ServiceReferenceCDBData.CDBDataSoap, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    public partial class CDBDataSoapClient : System.ServiceModel.ClientBase<ServiceReferenceCDBData.CDBDataSoap>, ServiceReferenceCDBData.CDBDataSoap
    {
        
        /// <summary>
        /// Implement this partial method to configure the service endpoint.
        /// </summary>
        /// <param name="serviceEndpoint">The endpoint to configure</param>
        /// <param name="clientCredentials">The client credentials</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public CDBDataSoapClient(EndpointConfiguration endpointConfiguration) : 
                base(CDBDataSoapClient.GetBindingForEndpoint(endpointConfiguration), CDBDataSoapClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public CDBDataSoapClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(CDBDataSoapClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public CDBDataSoapClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(CDBDataSoapClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public CDBDataSoapClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public string SendDataTestFunction(string sInput)
        {
            return base.Channel.SendDataTestFunction(sInput);
        }
        
        public System.Threading.Tasks.Task<string> SendDataTestFunctionAsync(string sInput)
        {
            return base.Channel.SendDataTestFunctionAsync(sInput);
        }
        
        public string SendData(string sInput)
        {
            return base.Channel.SendData(sInput);
        }
        
        public System.Threading.Tasks.Task<string> SendDataAsync(string sInput)
        {
            return base.Channel.SendDataAsync(sInput);
        }
        
        public System.Xml.XmlNode SendDataXmlOut(string sInput)
        {
            return base.Channel.SendDataXmlOut(sInput);
        }
        
        public System.Threading.Tasks.Task<System.Xml.XmlNode> SendDataXmlOutAsync(string sInput)
        {
            return base.Channel.SendDataXmlOutAsync(sInput);
        }
        
        public System.Xml.XmlNode SendDataXml(System.Xml.XmlNode oXDocInput)
        {
            return base.Channel.SendDataXml(oXDocInput);
        }
        
        public System.Threading.Tasks.Task<System.Xml.XmlNode> SendDataXmlAsync(System.Xml.XmlNode oXDocInput)
        {
            return base.Channel.SendDataXmlAsync(oXDocInput);
        }
        
        public string SendIP(string sInput)
        {
            return base.Channel.SendIP(sInput);
        }
        
        public System.Threading.Tasks.Task<string> SendIPAsync(string sInput)
        {
            return base.Channel.SendIPAsync(sInput);
        }
        
        public System.Xml.XmlNode SendIPXmlOut(string sInput)
        {
            return base.Channel.SendIPXmlOut(sInput);
        }
        
        public System.Threading.Tasks.Task<System.Xml.XmlNode> SendIPXmlOutAsync(string sInput)
        {
            return base.Channel.SendIPXmlOutAsync(sInput);
        }
        
        public System.Xml.XmlNode SendIPXml(System.Xml.XmlNode oXDocInput)
        {
            return base.Channel.SendIPXml(oXDocInput);
        }
        
        public System.Threading.Tasks.Task<System.Xml.XmlNode> SendIPXmlAsync(System.Xml.XmlNode oXDocInput)
        {
            return base.Channel.SendIPXmlAsync(oXDocInput);
        }
        
        public string GetTicket(string sInput)
        {
            return base.Channel.GetTicket(sInput);
        }
        
        public System.Threading.Tasks.Task<string> GetTicketAsync(string sInput)
        {
            return base.Channel.GetTicketAsync(sInput);
        }
        
        public string CheckTicket(string sInput)
        {
            return base.Channel.CheckTicket(sInput);
        }
        
        public System.Threading.Tasks.Task<string> CheckTicketAsync(string sInput)
        {
            return base.Channel.CheckTicketAsync(sInput);
        }
        
        public string CheckTicketTICWeb_A(string sInput)
        {
            return base.Channel.CheckTicketTICWeb_A(sInput);
        }
        
        public System.Threading.Tasks.Task<string> CheckTicketTICWeb_AAsync(string sInput)
        {
            return base.Channel.CheckTicketTICWeb_AAsync(sInput);
        }
        
        public System.Xml.XmlNode BackOffXml(System.Xml.XmlNode oXDocInput)
        {
            return base.Channel.BackOffXml(oXDocInput);
        }
        
        public System.Threading.Tasks.Task<System.Xml.XmlNode> BackOffXmlAsync(System.Xml.XmlNode oXDocInput)
        {
            return base.Channel.BackOffXmlAsync(oXDocInput);
        }
        
        public System.Xml.XmlNode BackOffXmlOut(string sInput)
        {
            return base.Channel.BackOffXmlOut(sInput);
        }
        
        public System.Threading.Tasks.Task<System.Xml.XmlNode> BackOffXmlOutAsync(string sInput)
        {
            return base.Channel.BackOffXmlOutAsync(sInput);
        }
        
        public string BackOff(string sInput)
        {
            return base.Channel.BackOff(sInput);
        }
        
        public System.Threading.Tasks.Task<string> BackOffAsync(string sInput)
        {
            return base.Channel.BackOffAsync(sInput);
        }
        
        public string GetMyIPAddress()
        {
            return base.Channel.GetMyIPAddress();
        }
        
        public System.Threading.Tasks.Task<string> GetMyIPAddressAsync()
        {
            return base.Channel.GetMyIPAddressAsync();
        }
        
        public string GetWebServerDateTime()
        {
            return base.Channel.GetWebServerDateTime();
        }
        
        public System.Threading.Tasks.Task<string> GetWebServerDateTimeAsync()
        {
            return base.Channel.GetWebServerDateTimeAsync();
        }
        
        public string GetCdbDateTime()
        {
            return base.Channel.GetCdbDateTime();
        }
        
        public System.Threading.Tasks.Task<string> GetCdbDateTimeAsync()
        {
            return base.Channel.GetCdbDateTimeAsync();
        }
        
        public string GetTicDB1DateTime()
        {
            return base.Channel.GetTicDB1DateTime();
        }
        
        public System.Threading.Tasks.Task<string> GetTicDB1DateTimeAsync()
        {
            return base.Channel.GetTicDB1DateTimeAsync();
        }
        
        public System.Xml.XmlNode SendMYSXml(System.Xml.XmlNode oXDocInput)
        {
            return base.Channel.SendMYSXml(oXDocInput);
        }
        
        public System.Threading.Tasks.Task<System.Xml.XmlNode> SendMYSXmlAsync(System.Xml.XmlNode oXDocInput)
        {
            return base.Channel.SendMYSXmlAsync(oXDocInput);
        }
        
        public string SendMYS(string sInput)
        {
            return base.Channel.SendMYS(sInput);
        }
        
        public System.Threading.Tasks.Task<string> SendMYSAsync(string sInput)
        {
            return base.Channel.SendMYSAsync(sInput);
        }
        
        public System.Xml.XmlNode SendMYSXmlOut(string sInput)
        {
            return base.Channel.SendMYSXmlOut(sInput);
        }
        
        public System.Threading.Tasks.Task<System.Xml.XmlNode> SendMYSXmlOutAsync(string sInput)
        {
            return base.Channel.SendMYSXmlOutAsync(sInput);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.CDBDataSoap))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                result.Security.Mode = System.ServiceModel.BasicHttpSecurityMode.Transport;
                return result;
            }
            if ((endpointConfiguration == EndpointConfiguration.CDBDataSoap12))
            {
                System.ServiceModel.Channels.CustomBinding result = new System.ServiceModel.Channels.CustomBinding();
                System.ServiceModel.Channels.TextMessageEncodingBindingElement textBindingElement = new System.ServiceModel.Channels.TextMessageEncodingBindingElement();
                textBindingElement.MessageVersion = System.ServiceModel.Channels.MessageVersion.CreateVersion(System.ServiceModel.EnvelopeVersion.Soap12, System.ServiceModel.Channels.AddressingVersion.None);
                result.Elements.Add(textBindingElement);
                System.ServiceModel.Channels.HttpsTransportBindingElement httpsBindingElement = new System.ServiceModel.Channels.HttpsTransportBindingElement();
                httpsBindingElement.AllowCookies = true;
                httpsBindingElement.MaxBufferSize = int.MaxValue;
                httpsBindingElement.MaxReceivedMessageSize = int.MaxValue;
                result.Elements.Add(httpsBindingElement);
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.CDBDataSoap))
            {
                return new System.ServiceModel.EndpointAddress("https://lcs.lts.it/data/cdbdata.asmx");
            }
            if ((endpointConfiguration == EndpointConfiguration.CDBDataSoap12))
            {
                return new System.ServiceModel.EndpointAddress("https://lcs.lts.it/data/cdbdata.asmx");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        public enum EndpointConfiguration
        {
            
            CDBDataSoap,
            
            CDBDataSoap12,
        }
    }
}
